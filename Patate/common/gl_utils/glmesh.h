/*
 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#ifndef _PATATE_COMMON_GL_UTILS_GLMESH_H
#define _PATATE_COMMON_GL_UTILS_GLMESH_H

#include "Eigen/Dense"
#include "Patate/common/surface_mesh/surfaceMesh.h"
#include <vector>


namespace PatateCommon
{
/*!
 * \brief The GL3DMesh struct implements basic VBO display for triangular 3d meshes.
 *
 * It can be generated by OBJReader
 */
struct GLTri3DMesh{
    enum { Dim = 3 };
    typedef GLfloat                       Scalar;
    typedef Eigen::Matrix<Scalar, Dim, 1> Vector;
    typedef SurfaceMesh::Vertex           Vertex; // ids

    inline void addFace(const std::vector<Vertex>& vertices);
    inline void addVertex(const Vector& v);
    inline unsigned int nVertices() const;

    inline GLTri3DMesh();
    inline void initVBO();
    inline void draw();

protected:
    inline void computeNormals();

    typedef std::vector<Scalar> VContainer;
    typedef std::vector<GLuint> FContainer;

    VContainer _vertices;
    VContainer _normals;
    FContainer _faces;    //will be the index buffer
    bool _init;

    GLuint _vao;
    GLuint _vboFaceArray, _vboVertArray, _vboNormalArray;
};


} // namespace PatateCommon

#include "glmesh.hpp"

#endif // _PATATE_COMMON_GL_UTILS_GLMESH_H

